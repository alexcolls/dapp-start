/* __auths__.schemas.ts */

import {
  AuthControlsTable,
  ConnectedWeb2AccountsTable,
  ConnectedWeb3AccountsTable,
  AdvancedSecurityTable,
  AuthSecretKeysTable,
  Web3AuthAccountsTable,
} from "./__auths__.tables";
import {
  convertClassToSQLSchema,
  convertClassToSQLInitSchema,
} from "../../../../global/utils/sql.utils";
import { TSecurityLabel } from "../../../../global/types/custom/security.types";

const PRINT_LOGS = false;

/*** AUTHS DB INIT SCHEMAS ***/

/** PUBLIC SCHEMAS **/

/* ConnectedWeb2Accounts schemas */

class ConnectedWeb2AccountsClass implements ConnectedWeb2AccountsTable {
  __uid__ = ""; // user's id (username, email or token)
  __ukey__ = ""; // user's autogenerated password (555 bits)
  _google_ = ""; // google account id.
  _apple_ = ""; // apple account id.
  _twitter_ = ""; // twitter account id.
  _discord_ = ""; // discord account id.
  _twitch_ = ""; // twitch account id.
  _facebook_ = ""; // facebook account id.
  _linkedin_ = ""; // linkedin account id.
  _github_ = ""; // github account id.
  _reddit_ = ""; // reddit account id.
  _line_ = ""; // line account id.
  _kakao_ = ""; // kakao account id.
  _weibo_ = ""; // weibo account id.
  _wechat_ = ""; // wechat account id.
  _timestamp = BigInt(0); // record timestamp.
  security: TSecurityLabel; // security risk indicator.
  constructor(TSecurityLabel: TSecurityLabel) {
    this.security = TSecurityLabel;
  }
}

export const connectedWeb2AccountsClass = new ConnectedWeb2AccountsClass("$"); // Low Security Risk
export const connectedWeb2AccountsSchema = convertClassToSQLSchema(
  connectedWeb2AccountsClass
);
export const connectedWeb2AccountsInitSchema = convertClassToSQLInitSchema(
  connectedWeb2AccountsSchema
);

/* ConnectedWeb3Accounts schemas */

class ConnectedWeb3AccountsClass implements ConnectedWeb3AccountsTable {
  __uid__ = ""; // user's id (username, email or token)
  __ukey__ = ""; // user's autogenerated password (555 bits)
  _torus = ""; // torus wallet pubkeys.
  _metamask = ""; // metamask wallet pubkeys.
  _connect = ""; // wallet connect pubkeys.
  _trust = ""; // trust wallet pubkeys.
  _coinbase = ""; // coinbase wallet pubkeys.
  _phantom = ""; // phantom wallet pubkeys.
  _others = ""; // other wallets pubkeys.
  _timestamp = BigInt(0); // record timestamp.
  security: TSecurityLabel; // security risk indicator.
  constructor(TSecurityLabel: TSecurityLabel) {
    this.security = TSecurityLabel;
  }
}

export const connectedWeb3AccountsClass = new ConnectedWeb3AccountsClass("$"); // Low Security Risk
export const connectedWeb3AccountsSchema = convertClassToSQLSchema(
  connectedWeb3AccountsClass
);
export const connectedWeb3AccountsInitSchema = convertClassToSQLInitSchema(
  connectedWeb3AccountsSchema
);

class AuthControlsClass implements AuthControlsTable {
  __uid__ = ""; // user's id (username, email or token)
  __ukey__ = ""; // user's autogenerated password (555 bits)
  _lang = "en"; // user keyboard language (for special characters)
  _contactEmail? = ""; // for marketing purposes (optional)
  _contactPhone? = ""; // for marketing purposes (optional)
  _verified = false; // if users has completed phone verification.
  _recoveryEmail = ""; // user's recovery email.
  _recoveryPhone = ""; // user's recovery phone.
  _timestamp = BigInt(0); // record timestamp.
  security: TSecurityLabel; // security risk indicator.
  constructor(TSecurityLabel: TSecurityLabel) {
    this.security = TSecurityLabel;
  }
}

export const authControlsClass = new AuthControlsClass("$$"); // Medium Security Risk
export const authControlsSchema = convertClassToSQLSchema(authControlsClass);
export const authControlsInitSchema =
  convertClassToSQLInitSchema(authControlsClass);

/* AdvancedSecurity schemas */

export class AdvancedSecurityClass implements AdvancedSecurityTable {
  __uid__ = ""; // user's id (username, email or token)
  __ukey__ = ""; // user's autogenerated password (555 bits)
  _securityFactor = 1; // 1FAC, 2FAC, 3FAC or 4FAC to login.
  _forceConnections = [""]; // force user to connect to these accounts to authenticate.
  _maxDays = 30; // max number of days to keep user logged in browser.
  _maxSessions = 2; // max number of concurred sessions allowed.
  _connectionExpires = 60 * 60; // (1 hour) // number of seconds until the user's socket expires, and reconnects automatically. Not re-login required.
  _blackListIPs = [""]; // blacklisted network ip addresses.
  _blackListDevices = [""]; // blacklisted machine addresses.
  _blackListPlatforms = [""]; // blacklisted OS platforms.
  _blacklistCountries = [""]; // blacklisted countries (ISO 3166-1 alpha-2)
  _timestamp = BigInt(0); // record timestamp.
  security: TSecurityLabel; // security risk indicator.
  constructor(TSecurityLabel: TSecurityLabel) {
    this.security = TSecurityLabel;
  }
}

export const advancedSecurityClass = new AdvancedSecurityClass("$$"); // Medium Security Risk
export const advancedSecuritySchema = convertClassToSQLSchema(
  advancedSecurityClass
);
export const advancedSecurityInitSchema = convertClassToSQLInitSchema(
  advancedSecurityClass
);

/** PRIVATE STATES **/

/*
!!! SECURITY NOTE: INTERFACES BELOW ARE NEVER SHARED WITH THE CLIENT APP !!!
*/

/* AuthSecretKeys schemas */

class AuthSecretKeysClass implements AuthSecretKeysTable {
  __uid__ = ""; // user's id (username, email or token)
  __ukey__ = ""; // user's autogenerated password (555 bits)
  _tokens = [""]; // user's auth tokens/NFTs holded in wallets (40-80 bits)
  _emails = [""]; // user's signup emails.
  _phones = [""]; // user's signup phone numbers.
  _pubkeys = [""]; // public keys (wallet addresses)
  _oauthIDs = [""]; // oauth user user tokens.
  _oauthsKeys = [""]; // oauth user secret keys.
  _web3authIDs = [""]; // web3auth user id token (1024 bits)
  _whiteListIPs = [""]; // whitelisted network ip addresses.
  _whiteListDevices = [""]; // whitelisted machine addresses.
  _recoveryToken_ = ""; // unique user's recovery token (1024 bits)
  _timestamp = BigInt(0); // record timestamp.
  security: TSecurityLabel; // security risk indicator.
  constructor(TSecurityLabel: TSecurityLabel) {
    this.security = TSecurityLabel;
  }
}

export const authSecretKeysClass = new AuthSecretKeysClass("$$$"); // High Security Risk
export const authSecretKeysSchema =
  convertClassToSQLSchema(authSecretKeysClass);
export const authSecretKeysInitSchema =
  convertClassToSQLInitSchema(authSecretKeysClass);

/* Web3AuthAccounts schemas */

class Web3AuthAccountsClass implements Web3AuthAccountsTable {
  __uid__ = ""; // user's id (username, email or token)
  __ukey__ = ""; // user's autogenerated password (555 bits)
  __clientID__ = ""; // web3auth user id token (1024 bits)
  _email = "";
  _phone = "";
  _wallet = ""; // user's web3auth wallet address (pubkey)
  _pfp = "";
  _provider = "";
  _aggregator = "";
  _type = "";
  _dapp = "";
  _oauth = "";
  _oauth_id = "";
  _last_login = BigInt(0); // epoch in milliseconds
  _created_at = BigInt(0); // epoch in milliseconds
  _timestamp = BigInt(0); // record timestamp.
  security: TSecurityLabel; // security risk indicator.
  constructor(TSecurityLabel: TSecurityLabel) {
    this.security = TSecurityLabel;
  }
}

export const web3AuthAccountsClass = new Web3AuthAccountsClass("$$$"); // High Security Risk
export const web3AuthAccountsSchema = convertClassToSQLSchema(
  web3AuthAccountsClass
);
export const web3AuthAccountInitSchema = convertClassToSQLInitSchema(
  web3AuthAccountsClass
);

/** PRINT SCHEMAS OUTPUT **/

if (PRINT_LOGS) {
  console.log(
    "\n\nAuthControls:\n",
    authControlsSchema,
    "\n",
    authControlsInitSchema
  );
  console.log(
    "\n\nConnectedWeb2Accounts:\n",
    connectedWeb2AccountsSchema,
    "\n",
    connectedWeb2AccountsInitSchema
  );
  console.log(
    "\n\nConnectedWeb3Accounts:\n",
    connectedWeb3AccountsSchema,
    "\n",
    connectedWeb3AccountsInitSchema
  );
  console.log(
    "\n\nAdvancedSecurity:\n",
    advancedSecuritySchema,
    "\n",
    advancedSecurityInitSchema
  );
  console.log(
    "\n\nAuthSecretKeys:\n",
    authSecretKeysSchema,
    "\n",
    authSecretKeysInitSchema
  );
  console.log(
    "\n\nWeb3AuthAccounts:\n",
    web3AuthAccountsSchema,
    "\n",
    web3AuthAccountInitSchema,
    "\n"
  );
}

/* END OF SCRIPT */
/* v1.0 */
/* Last update: 2023-05-10 */
