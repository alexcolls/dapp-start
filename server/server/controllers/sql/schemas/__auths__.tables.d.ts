/* __auths__.tables.d.ts */

import { SecurityFactor, OS } from "../../../global/types";
import { SocialAccounts } from "../../../global/interfaces/user.interfaces";

/*** AUTHS TABLES INTERFACES ***/

/** PUBLIC STATES **/

/* AuthControls table */

interface AuthControlsTable {
  __uid__: string; // user's id (username, email or token)
  __ukey__: string; // user's autogenerated password (555 bits)
  _lang: string; // user keyboard language (for special characters)
  _contactEmail?: string; // for marketing purposes (optional)
  _contactPhone?: string; // for marketing purposes (optional)
  _verified: boolean; // if users has completed phone verification.
  _recoveryEmail: string; // user's recovery email.
  _recoveryPhone: string; // user's recovery phone.
  _timestamp: bigint; // record timestamp.
}

/*  AdvancedSecurity table */

interface AdvancedSecurityTable {
  __uid__: string; // user's id (username, email or token)
  __ukey__: string; // user's autogenerated password (555 bits)
  _securityFactor: number; // 1FAC, 2FAC, 3FAC or 4FAC to login.
  // SECURITY NOTE: !!! TODO !!! Make service that verifies that it's never 0 but [1-4], even it's already typed. It must be trigerred everytime user logins.
  _forceConnections: string[]; // force user to connect to these accounts to authenticate.
  _maxDays: number; // max number of days to keep user logged in browser.
  _maxSessions: number; // max number of concurred sessions allowed.
  _connectionExpires: number; // number of seconds until the user's socket expires, and reconnects automatically. Not re-login required.
  _blackListIPs: string[]; // blacklisted network ip addresses.
  _blackListDevices: string[]; // blacklisted machine addresses.
  _blackListPlatforms: string[]; // blacklisted OS platforms.
  _blacklistCountries: string[]; // blacklisted countries (ISO 3166-1 alpha-2)
  _timestamp: bigint; // record timestamp.
}

/** PRIVATE STATES **/

/*
!!! SECURITY NOTE: INTERFACES BELOW ARE NEVER SHARED WITH THE CLIENT APP !!!
*/

/* AuthSecretKeys table */

interface AuthSecretKeysTable {
  __uid__: string; // user's id (username, email or token)
  __ukey__: string; // user's autogenerated password (555 bits)
  _recoveryToken: string; // Private Auth State token (1024 bits) (for recovering & updating passwords)
  _tokens: string[]; // user's auth tokens/NFTs holded in wallets (40-80 bits)
  _emails: string[]; // user's signup emails.
  _phones: string[]; // user's signup phone numbers.
  _pubkeys: string[]; // public keys (wallet addresses)
  _oauthIDs: string[]; // oauth user user tokens.
  _oauthsKeys: string[]; // oauth user secret keys.
  _web3authIDs: string[]; // web3auth user id token (1024 bits)
  _whiteListIPs: string[]; // whitelisted network ip addresses.
  _whiteListDevices: string[]; // whitelisted machine addresses.
  _timestamp: bigint; // record timestamp.
}

/* Web3AuthAccounts table */

interface Web3AuthAccountsTable {
  __uid__: string; // user's id (username, email or token)
  __ukey__: string; // user's autogenerated password (555 bits)
  __clientID__: string; // web3auth user id token (1024 bits)
  _email: string;
  _phone: string;
  _wallet: string; // user's web3auth wallet address (pubkey)
  _pfp: string;
  _provider: string;
  _aggregator: string;
  _type: string;
  _dapp: string;
  _oauth: string;
  _oauth_id: string;
  _last_login: bigint; // epoch in milliseconds
  _created_at: bigint; // epoch in milliseconds
  _timestamp: bigint; // record timestamp.
}

/* END OF SCRIPT */
/* v1.0 */
/* Last update: 2023-05-09 */
